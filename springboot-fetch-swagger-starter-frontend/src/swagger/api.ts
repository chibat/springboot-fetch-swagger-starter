/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import * as querystring from "querystring";
import * as url from "url";

import * as isomorphicFetch from "isomorphic-fetch";
import * as assign from "core-js/library/fn/object/assign";

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "https://localhost/";

export interface FetchArgs {
    url: string;
    options: any; 
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
}

export interface Response {
    "result"?: number;
}



/**
 * ApplicationApi - fetch parameter creator
 */
export const ApplicationApiFetchParamCreactor = {
    /** 
     * add
     * @param arg1 arg1
     * @param arg2 arg2
     */
    addUsingGET(params: {  arg1: number; arg2: number; }): FetchArgs {
        // verify required parameter "arg1" is set
        if (params["arg1"] == null) {
            throw new Error("Missing required parameter arg1 when calling addUsingGET");
        }
        // verify required parameter "arg2" is set
        if (params["arg2"] == null) {
            throw new Error("Missing required parameter arg2 when calling addUsingGET");
        }
        const baseUrl = `/rest/add`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "arg1": params.arg1,
            "arg2": params.arg2,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
}

/**
 * ApplicationApi - functional programming interface
 */
export const ApplicationApiFp = {
    /** 
     * add
     * @param arg1 arg1
     * @param arg2 arg2
     */
    addUsingGET(params: { arg1: number; arg2: number;  }): (fetch: FetchAPI, basePath?: string) => Promise<Response> {
        const fetchArgs = ApplicationApiFetchParamCreactor.addUsingGET(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * ApplicationApi - object-oriented interface
 */
export class ApplicationApi extends BaseAPI {
    /** 
     * add
     * @param arg1 arg1
     * @param arg2 arg2
     */
    addUsingGET(params: {  arg1: number; arg2: number; }) {
        return ApplicationApiFp.addUsingGET(params)(this.fetch, this.basePath);
    }
};

/**
 * ApplicationApi - factory interface
 */
export const ApplicationApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /** 
         * add
         * @param arg1 arg1
         * @param arg2 arg2
         */
        addUsingGET(params: {  arg1: number; arg2: number; }) {
            return ApplicationApiFp.addUsingGET(params)(fetch, basePath);
        },
    }
};

